<?php

/**
 * @file
 * Autoweek video installation
 */

/**
 * Implements hook_install().
 */
function aw_video_install() {
    // Set default variables.
    variable_set('aw_video_test', 1);
    variable_set('aw_video_path', 0.1);
    
    //Get localization function for installation as t() may be unavailable.
    $t = get_t();
    
    // Give user feedback.
    drupal_set_message($t('Autoweek video variables created.'));
    
    // Content type definition.
    $content_type = array(
        'type' => 'aw_video',
        'name' => $t('Video'),
        'description' => $t('An Autoweek video.'),
        'title_label' => $t('Video Title'),
        'base' => 'node_content',
        'custom' => TRUE,
    );
    
    // Set remaining definitions with defaults.
    $node_type = node_type_set_defaults($content_type);
    
    // Save the content type
    node_type_save($node_type);
    
    // Add a field for the body
    //node_add_body_field($node_type, $t('Description'));
    
    // Create fields.
    $fields = array();

    //Group 1 - Video Info
    $fields['aw_video_ext_id'] = array(
        'field_name' => 'aw_video_ext_id',
        'type' => 'text',
        'weight' => 1,
    );
    $fields['aw_video_type'] = array(
        'field_name' => 'aw_video_type',
        'type' => 'list_text',
        'weight' => 2,
        'cardinality' => 1,
        'settings' => array(
            'allowed_values' => array(
                'brightcove' => 'brightcove',
                'youtube' => 'youtube',
                'vimeo' => 'vimeo',
            ),
        ),
    );
    $fields['aw_video_img'] = array(
        'field_name' => 'aw_video_img',
        'type' => 'image',
        'weight' => 3,
    );
    $fields['aw_video_caption'] = array(
        'field_name' => 'aw_video_caption',
        'type' => 'text_long',
        'weight' => 4,
        'settings' => array(
            'max_length' => 0,
        ),
    );
    
    //Group 2 - Taxonomy
    $fields['aw_video_author_ref'] = array(
        'field_name' => 'aw_video_author_ref',
        'cardinality' => 1,
        'type' => 'entityreference',
        'weight' => 5,
        'settings' => array(
            'target_type' => 'user',
        ),
    );
    $fields['aw_video_author_override'] = array(
        'field_name' => 'aw_video_author_override',
        'type' => 'text',
        'weight' => 6,
    );
    $fields['aw_video_primary_tag'] = array(
        'field_name' => 'aw_video_primary_tag',
        'type' => 'taxonomy_term_reference',
        'weight' => 7,
        'settings' => array(
            'allowed_values' => array(
               array(
                'vocabulary' => 'taxonomy',
                'parent' => 0,
               ),
             ),
           ),
        'cardinality' => 1,
    );
    $fields['aw_video_secondary_tag'] = array(
        'field_name' => 'aw_video_secondary_tag',
        'type' => 'taxonomy_term_reference',
        'weight' => 8,
        'settings' => array(
            'allowed_values' => array(
               array(
                'vocabulary' => 'taxonomy',
                'parent' => 0,
               ),
             ),
           ),
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    );
    $fields['aw_video_vehicle'] = array(
        'field_name' => 'aw_video_vehicle',
        'type' => 'taxonomy_term_reference',
        'weight' => 9,
        'settings' => array(
            'allowed_values' => array(
              array(
                'vocabulary' => 'vehicles',
                'parent' => 0,
               ),
             ),
           ),
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    );
    $fields['aw_video_driver'] = array(
        'field_name' => 'aw_video_driver',
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
        'type' => 'entityreference',
        'weight' => 10,
        'settings' => array(
            'target_type' => 'node',
            'handler_settings' => array(
                'target_bundles' => array(
                    'awr_driver' => 'awr_driver',
                ),
            ),    
        ),
    );
    
    foreach ($fields as $field) {
        field_create_field($field);
    }
    
    // Create field instances.
    $instances = array();
    
    //Group 1 - Video Info
    $instances['aw_video_ext_id'] = array(
        'field_name' => 'aw_video_ext_id',
        'label' => $t('External video id'),
        'description' => $t('The external id of the video.'),
        'required' => TRUE,
        'widget' => array(
            'type' => 'text_textfield',
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );
    $instances['aw_video_type'] = array(
        'field_name' => 'aw_video_type',
        'label' => $t('Video Type'),
        'description' => $t('The type of video.'),
        'required' => TRUE,
        'widget' => array(
            'type' => 'options_select',
        ),
    );
    $instances['aw_video_img'] = array(
        'field_name' => 'aw_video_img',
        'label' => $t('Upload video image here'),
        'description' => $t('The uploaded image file.'),
        'required' => FALSE,
        'widget' => array(
            'type' => 'awlarge',
        ),
        'settings' => array(
            'title_field' => TRUE,
            'alt_field' => TRUE,
            'alt_field_default' => '[node:title]',
            'title_field_default' => '[node:title]',
        ),
        'display' => array(
            'default' => array(
                'settings' => array(
                    'image_style' => 'aw-large',
                ),
                'weight' => 0,
            ),
        ),
    );
    $instances['aw_video_caption'] = array(
        'field_name' => 'aw_video_caption',
        'label' => $t('Video Caption'),
        'description' => $t('The caption for the video.'),
        'widget' => array(
            'type' => 'text_textarea',
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );
    
    
    //Group 2 - Taxonomy
    $instances['aw_video_author_ref'] = array(  
        'field_name' => 'aw_video_author_ref',
        'label' => 'Author Reference',
        'description' => $t('The byline author reference.'),
        'widget' => array(
           'type' => 'entityreference_autocomplete',
        ),
        'settings' => array(
            'target_type' => 'user',
        ),
    );
    $instances['aw_video_author_override'] = array(
        'field_name' => 'aw_video_author_override',
        'label' => $t('Author Override Text'),
        'description' => $t('Type in the author ONLY if you\'d like to override the author reference field.'),
        'widget' => array(
            'type' => 'text_textfield',
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );
    $instances['aw_video_primary_tag'] = array(
        'field_name' => 'aw_video_primary_tag',
        'label' => $t('Primary Tag'),
        'description' => $t('Select one Primary tag.'),
        'widget' => array(
            'type' => 'taxonomy_autocomplete',
        ),
    );
    $instances['aw_video_secondary_tag'] = array(
        'field_name' => 'aw_video_secondary_tag',
        'label' => $t('Secondary Tags'),
        'description' => $t('Select the Secondary tags.'),
        'widget' => array(
            'type' => 'term_reference_tree',
            'settings' => array(
                'start_minimized' => 1,
                'select_parents' => 1,
                'track_list' => 1,
            
            ),
        ),
    );
    $instances['aw_video_vehicle'] = array(
        'field_name' => 'aw_video_vehicle',
        'label' => $t('Vehicle'),
        'description' => $t('Attach the vehicle.  Choosing more than 3 will disable the shopping widget.'),
        'widget' => array(
            'type' => 'term_reference_tree',
            'settings' => array(
                'start_minimized' => 1,
                'select_parents' => 1,
                'track_list' => 1,
            
            ),
        ),
    );
    $instances['aw_video_driver'] = array(  
        'field_name' => 'aw_video_driver',
        'label' => 'Race Driver',
        'description' => $t('Attach one or more drivers.'),
        'settings' => array(
            'target_type' => 'node',
        ),
        'widget' => array(
            'type' => 'entityreference_autocomplete',
        ),
    );
    
    foreach ($instances as $instance) {
        $instance['entity_type'] = 'node';
        $instance['bundle'] = 'aw_video';
        field_create_instance($instance);
    }
}

/**
* Implements hook_uninstall().
*/
function aw_video_uninstall() {
    // Delete variables.
    variable_del('aw_video_test');
    variable_del('aw_video_path');

    // Inform the user of the removal.
    $t = get_t();
    drupal_set_message($t('Autoweek Video variables removed.'));
    
    //Get all node ids with aw_video content type.
    $sql_query = 'SELECT nid ';
    $sql_query .= 'FROM {node} ';
    $sql_query .= 'WHERE {node}.type = :type ';
    $result = db_query($sql_query, array(':type' => 'aw_video'));
    
    $nids = array();
    foreach ($result as $row) {
        $nids[] = $row->nid;
    }
    
    // Delete all aw_video content.
    node_delete_multiple($nids);
    drupal_set_message($t('Autoweek Video content removed.'));
    
    //Remove all fields and field instances.
    foreach (field_info_instances('node', 'aw_video') as $field_name => $instance) {
        field_delete_instance($instance);
    }
    drupal_set_message($t('Autoweek Videos fields and field instances removed.'));
    
    //Delete the content type.
    node_type_delete('aw_video');
    drupal_set_message($t('Autoweek Videos content type removed.'));
    
    //Clean up deleted fields.
    field_purge_batch(1000);
}