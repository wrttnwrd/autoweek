<?php

/**
 * @file
 * Autoweek Product installation
 */

/**
 * Implements hook_install().
 */
function aws_product_install() {
    
    
    //Get localization function for installation as t() may be unavailable.
    $t = get_t();
    
    // Content type definition.
    $content_type = array(
        'type' => 'aws_product',
        'name' => $t('Product'),
        'description' => $t('An Autoweek Product.'),
        'title_label' => $t('Product Name'),
        'base' => 'node_content',
        'custom' => TRUE,
    );
    
    // Set remaining definitions with defaults.
    $node_type = node_type_set_defaults($content_type);
    
    // Save the content type
    node_type_save($node_type);
           
    // Create fields.
    $fields = array();
    
    //Fields Group 1 Product Info
    $fields['aws_product_description'] = array(
        'field_name' => 'aws_product_description',
        'type' => 'text_long',
        'weight' => 1,
        'settings' => array(
            'max_length' => 0,
        ),
    );
    $fields['aws_product_image'] = array(
        'field_name' => 'aws_product_image',
        'type' => 'image',
        'weight' => 2,
    );
    $fields['aws_product_content'] = array(
        'field_name' => 'aws_product_content',
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
        'type' => 'entityreference',
        'settings' => array(
            'target_type' => 'node',
            'handler_settings' => array(
                'target_bundles' => array(
                    'aw_image' => 'aw_image',
                    'aw_video' => 'aw_video',
                    'aw_gallery' => 'aw_gallery',
                    'aw_paragraph' => 'aw_paragraph',
                ),
            ),    
        ),
        'weight' => 3,
    );
    $fields['aws_product_id'] = array(
        'field_name' => 'aws_product_id',
        'type' => 'text',
        'weight' => 4,
    );
    $fields['aws_product_price'] = array(
        'field_name' => 'aws_product_price',
        'type' => 'text',
        'weight' => 5,
    );
    $fields['aws_product_company_ref'] = array(
        'field_name' => 'aws_product_company_ref',
        'cardinality' => 1,
        'type' => 'entityreference',
        'weight' => 6,
        'settings' => array(
            'target_type' => 'node',
            'handler' => 'base',
            'handler_settings' => array(
                'target_bundles' => array(
                    'aws_company' => 'aws_company',
                ),
            ),
        ),
    );
    $fields['aws_product_store_category'] = array(
        'field_name' => 'aws_product_store_category',
        'type' => 'taxonomy_term_reference',
        'settings' => array(
            'allowed_values' => array(
              array(
                'vocabulary' => 'store',
                'parent' => 0,
               ),
             ),
           ),
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
        'weight' => 7,
    );
    
    //Fields Group 2 Contact Info
    $fields['aws_product_url'] = array(
        'field_name' => 'aws_product_url',
        'type' => 'text',
        'weight' => 8,
    );
    $fields['aws_product_contact_name'] = array(
        'field_name' => 'aws_product_contact_name',
        'type' => 'text',
        'weight' => 9,
    );
    $fields['aws_product_contact_email'] = array(
        'field_name' => 'aws_product_contact_email',
        'type' => 'text',
        'weight' => 10,
    );
    $fields['aws_product_contact_phone'] = array(
        'field_name' => 'aws_product_contact_phone',
        'type' => 'text',
        'weight' => 11,
    );
    
    //Fields Group 3 SEMA
    $fields['aws_product_booth'] = array(
        'field_name' => 'aws_product_booth',
        'type' => 'text',
        'weight' => 12,
    );
    $fields['aws_product_pic_id'] = array(
        'field_name' => 'aws_product_pic_id',
        'type' => 'text',
        'weight' => 13,
    );
    $fields['aws_product_bcheckin'] = array(
        'field_name' => 'aws_product_bcheckin',
        'type' => 'number_integer',
        'weight' => 14,
    );
    $fields['aws_product_nforgid'] = array(
        'field_name' => 'aws_product_nforgid',
        'type' => 'text',
        'weight' => 15,
    );
    
    //Fields Group 4 Legacy
    $fields['aws_product_legacy_store'] = array(
        'field_name' => 'aws_product_legacy_store',
        'type' => 'text',
        'weight' => 16,
        'field_permissions' => array(
            'type' => 2,
        ),
    );
    $fields['aws_product_legacy_category'] = array(
        'field_name' => 'aws_product_legacy_category',
        'type' => 'text',
        'weight' => 17,
        'field_permissions' => array(
            'type' => 2,
        ),
    );

    foreach ($fields as $field) {
        field_create_field($field);
    }
    
    // Create field instances.
    $instances = array();
    
    //Instances Group 1 Product Info
    $instances['aws_product_description'] = array(
        'field_name' => 'aws_product_description',
        'label' => $t('Product Description'),
        'widget' => array(
            'type' => 'text_textarea',
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );
    $instances['aws_product_image'] = array(
        'field_name' => 'aws_product_image',
        'label' => $t('Main Product Image'),
        'description' => $t('Upload product main image here.'),
        'required' => FALSE,
        'settings' => array(
            'title_field' => TRUE,
            'alt_field' => TRUE,
            'alt_field_default' => '[node:title]',
            'title_field_default' => '[node:title]',
        ),
        'display' => array(
            'default' => array(
                'settings' => array(
                    'image_style' => 'aws-product-img',
                ),
                'weight' => 0,
            ),
        ),
    );
    $instances['aws_product_id'] = array(
        'field_name' => 'aws_product_id',
        'label' => $t('Product ID'),
        'widget' => array(
            'type' => 'text_textfield',
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );
    $instances['aws_product_price'] = array(
        'field_name' => 'aws_product_price',
        'label' => $t('Retail Price'),
        'widget' => array(
            'type' => 'text_textfield',
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );
    $instances['aws_product_company_ref'] = array(
        'field_name' => 'aws_product_company_ref',
        'label' => $t('Company Reference'),
        'description' => $t('Reference the Company that the product belongs to.'),
        'required' => FALSE,
        'widget' => array(
            'type' => 'entityreference_autocomplete',
            'settings' => array(
                'match_operator' => 'CONTAINS',
            ),
        ),
    );
    $instances['aws_product_store_category'] = array(
        'field_name' => 'aws_product_store_category',
        'label' => $t('Store / Category'),
        'description' => $t('Select the store/category the product belongs to.'),
        'widget' => array(
            'type' => 'term_reference_tree',
            'settings' => array(
                'start_minimized' => 1,
                'select_parents' => 1,
                'track_list' => 1,
            ),
        ),
    );
    
    //Instance2 Group 2 Content
    $instances['aws_product_content'] = array(  
        'field_name' => 'aws_product_content',
        'label' => 'Content',
        'description' => $t('The content for the body of the Product page.'),
        'settings' => array(
            'target_type' => 'node',
        ),
        'widget' => array(
            'type' => 'inline_entity_form',
            'settings' => array(
                'type_settings' => array(
                    'allow_existing' => 1,
                ),
            ),
        ),
    );
    
    //Instances Group 3 Contact Info
    $instances['aws_product_url'] = array(
        'field_name' => 'aws_product_url',
        'label' => $t('URL'),
        'widget' => array(
            'type' => 'text_textfield',
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );
    $instances['aws_product_contact_name'] = array(
        'field_name' => 'aws_product_contact_name',
        'label' => $t('Contact Name'),
        'widget' => array(
            'type' => 'text_textfield',
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );
    $instances['aws_product_contact_email'] = array(
        'field_name' => 'aws_product_contact_email',
        'label' => $t('Contact Email'),
        'widget' => array(
            'type' => 'text_textfield',
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );
    $instances['aws_product_contact_phone'] = array(
        'field_name' => 'aws_product_contact_phone',
        'label' => $t('Contact Phone'),
        'widget' => array(
            'type' => 'text_textfield',
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );
    
    //Instances Group 4 SEMA
    $instances['aws_product_booth'] = array(
        'field_name' => 'aws_product_booth',
        'label' => $t('Booth Number'),
        'widget' => array(
            'type' => 'text_textfield',
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );
    $instances['aws_product_pic_id'] = array(
        'field_name' => 'aws_product_pic_id',
        'label' => $t('Picture ID'),
        'widget' => array(
            'type' => 'text_textfield',
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );    
    $instances['aws_product_bcheckin'] = array(
        'field_name' => 'aws_product_bcheckin',
        'label' => $t('Checkin'),
        'description' => $t('Checkin 1=yes 0=no.  For backend use.'),
        'required' => FALSE,
        'widget' => array(
            'type' => 'number',
        ),
    );
    $instances['aws_product_nforgid'] = array(
        'field_name' => 'aws_product_nforgid',
        'label' => $t('nfOrgID'),
        'description' => $t('Company ID, for SEMA backend use.'),
        'widget' => array(
            'type' => 'text_textfield',
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );
    
    //Instances Group 5 Legacy
    $instances['aws_product_legacy_category'] = array(
        'field_name' => 'aws_product_legacy_category',
        'label' => $t('Legacy Category Text'),
        'description' => $t('For SEMA backend use.'),
        'widget' => array(
            'type' => 'text_textfield',
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );
    $instances['aws_product_legacy_store'] = array(
        'field_name' => 'aws_product_legacy_store',
        'label' => $t('Legacy Store Text'),
        'description' => $t('For backend use.'),
        'widget' => array(
            'type' => 'text_textfield',
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );
    
    foreach ($instances as $instance) {
        $instance['entity_type'] = 'node';
        $instance['bundle'] = 'aws_product';
        field_create_instance($instance);
    }
    
    //Call function to create styles.
    $style_name = array('aws-product-img');
    _aws_product_styles_create($style_name);
}

/**
* Implements hook_uninstall().
*/
function aws_product_uninstall() {

    $t = get_t();
    
    //Get all node ids with aws_product content type.
    $sql_query = 'SELECT nid ';
    $sql_query .= 'FROM {node} ';
    $sql_query .= 'WHERE {node}.type = :type ';
    $result = db_query($sql_query, array(':type' => 'aws_product'));
    
    $nids = array();
    foreach ($result as $row) {
        $nids[] = $row->nid;
    }
    
    // Delete all aws_product content.
    node_delete_multiple($nids);
    drupal_set_message($t('Autoweek Product content removed.'));
    
    //Remove all fields and field instances.
    foreach (field_info_instances('node', 'aws_product') as $field_name => $instance) {
        field_delete_instance($instance);
    }
    drupal_set_message($t('Autoweek Product fields and field instances removed.'));
    
    //Delete the content type.
    node_type_delete('aws_product');
    drupal_set_message($t('Autoweek Product content type removed.'));
    
    //Delete image styles.
    $style_name = array('aws-product-img');
    _aws_product_styles_delete($style_name);
    
    //Clean up deleted fields.
    field_purge_batch(1000);
}

/**
* Implements function to create new image style.
*/
function _aws_product_styles_create($style_name) {
    // Create image styles.
    foreach($style_name as $value) {
        $style = image_style_save(array('name' => $value));

        switch($value) {
            case 'aws-product-img':{
                $effect = array(
                    'name' => 'image_scale',
                    'data' => array(
                      'width' => 390,
                      'height' => 254,
                      'upscale' => TRUE,
                    ),
                    'isid' => $style['isid'],
                 );
                break;
            }
        }
        image_effect_save($effect);
    }
    
    // Give user feedback.
    $t = get_t();
    drupal_set_message($t('Autoweek Product styles created.'));
    
}

/**
* Implements function to delete image styles.
*/
function _aws_product_styles_delete($style_name) {
    // Delete image styles.
    foreach($style_name as $value) {
        image_style_delete(image_style_load($value));
    }
    
    // Give user feedback.
    $t = get_t();
    drupal_set_message($t('Autoweek Product styles deleted.'));
    
}