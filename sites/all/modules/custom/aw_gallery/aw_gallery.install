<?php

/**
 * @file
 * Autoweek gallery installation
 */

/**
 * Implements hook_install().
 */
function aw_gallery_install() {
    // Set default variables.
    variable_set('aw_gallery_test', 1);
    variable_set('aw_gallery_path', 0.1);
    
    //Get localization function for installation as t() may be unavailable.
    $t = get_t();
    
    // Give user feedback.
    drupal_set_message($t('Autoweek gallery variables created.'));
    
    // Content type definition.
    $content_type = array(
        'type' => 'aw_gallery',
        'name' => $t('Gallery'),
        'description' => $t('An Autoweek gallery.'),
        'title_label' => $t('Gallery Title'),
        'base' => 'node_content',
        'custom' => TRUE,
    );
    
    // Set remaining definitions with defaults.
    $node_type = node_type_set_defaults($content_type);
    
    // Save the content type
    node_type_save($node_type);
    
    // Add a field for the body
    //node_add_body_field($node_type, $t('Description'));
    
    // Create fields.
    $fields = array();
    

    $fields['aw_gallery_description'] = array(
        'field_name' => 'aw_gallery_description',
        'type' => 'text_long',
        'weight' => 1,
    );

    $fields['aw_gallery_multipage'] = array(
        'field_name' => 'aw_gallery_multipage',
        'type' => 'list_boolean',
        'settings' => array(
          'allowed_values' => array(0 => 0, 1 => 1),
        ),
    );
    $fields['aw_gallery_author_ref'] = array(
        'field_name' => 'aw_gallery_author_ref',
        'cardinality' => 1,
        'type' => 'entityreference',
        'settings' => array(
            'target_type' => 'user',
        ),
    );
    $fields['aw_gallery_author_override'] = array(
        'field_name' => 'aw_gallery_author_override',
        'type' => 'text',
    );
    $fields['aw_gallery_primary_tag'] = array(
        'field_name' => 'aw_gallery_primary_tag',
        'type' => 'taxonomy_term_reference',
        'settings' => array(
            'allowed_values' => array(
               array(
                'vocabulary' => 'taxonomy',
                'parent' => 0,
               ),
             ),
           ),
        'cardinality' => 1,
    );
    $fields['aw_gallery_secondary_tag'] = array(
        'field_name' => 'aw_gallery_secondary_tag',
        'type' => 'taxonomy_term_reference',
        'settings' => array(
            'allowed_values' => array(
               array(
                'vocabulary' => 'taxonomy',
                'parent' => 0,
               ),
             ),
           ),
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    );
    $fields['aw_gallery_driver'] = array(
        'field_name' => 'aw_gallery_driver',
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
        'type' => 'entityreference',
        'settings' => array(
            'target_type' => 'node',
            'handler_settings' => array(
                'target_bundles' => array(
                    'awr_driver' => 'awr_driver',
                ),
            ),    
        ),
    );
    $fields['aw_gallery_vehicle'] = array(
        'field_name' => 'aw_gallery_vehicle',
        'type' => 'taxonomy_term_reference',
        'settings' => array(
            'allowed_values' => array(
              array(
                'vocabulary' => 'vehicles',
                'parent' => 0,
               ),
             ),
           ),
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    );
    $fields['aw_gallery_slides'] = array(
        'field_name' => 'aw_gallery_slides',
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
        'type' => 'entityreference',
        'settings' => array(
            'target_type' => 'node',
            'handler_settings' => array(
                'target_bundles' => array(
                    'aw_image' => 'aw_image',
                    'aw_video' => 'aw_video',
                    'aw_paragraph' => 'aw_paragraph',
                ),
            ),    
        ),
    );
    $fields['aw_gallery_legacy_url'] = array(
        'field_name' => 'aw_gallery_legacy_url',
        'type' => 'text',
        'field_permissions' => array(
            'type' => 2,
        ),
    );
    $fields['aw_gallery_legacy_id'] = array(
        'field_name' => 'aw_gallery_legacy_id',
        'type' => 'text',
        'field_permissions' => array(
            'type' => 2,
        ),
    );
    $fields['aw_gallery_legacy_category'] = array(
        'field_name' => 'aw_gallery_legacy_category',
        'type' => 'text',
        'field_permissions' => array(
            'type' => 2,
        ),
    );
    
    foreach ($fields as $field) {
        field_create_field($field);
    }
    
    // Create field instances.
    $instances = array();

    $instances['aw_gallery_description'] = array(
        'field_name' => 'aw_gallery_description',
        'label' => $t('Gallery Description'),
        'description' => $t('The description of the gallery.'),
        'widget' => array(
            'type' => 'text_textarea',
            'settings' => array(
                'rows' => 4,
            ),
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );
    $instances['aw_gallery_multipage'] = array(
        'field_name' => 'aw_gallery_multipage',
        'label' => $t('Multi-page'),
        'description' => $t('Display slides on individual pages'),
        'widget' => array(
            'type' => 'options_onoff',
            'settings' => array('display_label' => 1),
          ),
    );
    $instances['aw_gallery_author_ref'] = array(  
        'field_name' => 'aw_gallery_author_ref',
        'label' => 'Author Reference',
        'description' => $t('The byline author reference.'),
        'widget' => array(
           'type' => 'entityreference_autocomplete',
        ),
        'settings' => array(
            'target_type' => 'user',
        ),
    );
    $instances['aw_gallery_author_override'] = array(
        'field_name' => 'aw_gallery_author_override',
        'label' => $t('Author Override Text'),
        'description' => $t('Type in the author ONLY if you\'d like to override the author reference field.'),
        'widget' => array(
            'type' => 'text_textfield',
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );
    $instances['aw_gallery_primary_tag'] = array(
        'field_name' => 'aw_gallery_primary_tag',
        'label' => $t('Primary Tag'),
        'description' => $t('Select one Primary tag.'),
        'widget' => array(
            'type' => 'taxonomy_autocomplete',
        ),
    );
    $instances['aw_gallery_secondary_tag'] = array(
        'field_name' => 'aw_gallery_secondary_tag',
        'label' => $t('Secondary Tags'),
        'description' => $t('Select the Secondary tags.'),
        'widget' => array(
            'type' => 'taxonomy_autocomplete',
        ),
    );
    $instances['aw_gallery_vehicle'] = array(
        'field_name' => 'aw_gallery_vehicle',
        'label' => $t('Vehicle'),
        'description' => $t('Attach the vehicle.  Choosing more than 3 will disable the shopping widget.'),
        'widget' => array(
            'type' => 'term_reference_tree',
            'settings' => array(
                'start_minimized' => 1,
                'select_parents' => 1,
                'track_list' => 1,
            
            ),
        ),
    );
    $instances['aw_gallery_driver'] = array(  
        'field_name' => 'aw_gallery_driver',
        'label' => 'Drivers',
        'description' => $t(''),
        'widget' => array(
           'type' => 'entityreference_autocomplete',
        ),
        'settings' => array(
            'target_type' => 'awr_driver',
        ),
    );
    $instances['aw_gallery_slides'] = array(  
        'field_name' => 'aw_gallery_slides',
        'label' => 'Slides',
        'description' => $t('The slides for the gallery.'),
        'settings' => array(
            'target_type' => 'node',
        ),
        'widget' => array(
            'type' => 'inline_entity_form',
            'settings' => array(
                'type_settings' => array(
                    'allow_existing' => 1,
                ),
            ),
        ),
    );
    $instances['aw_gallery_legacy_url'] = array(
        'field_name' => 'aw_gallery_legacy_url',
        'widget' => array(
            'type' => 'text',
        ),
    );
    $instances['aw_gallery_legacy_id'] = array(
        'field_name' => 'aw_gallery_legacy_id',
        'widget' => array(
            'type' => 'text',
        ),
    );
    $instances['aw_gallery_legacy_category'] = array(
        'field_name' => 'aw_gallery_legacy_category',
        'widget' => array(
            'type' => 'text',
        ),
    );
    
    foreach ($instances as $instance) {
        $instance['entity_type'] = 'node';
        $instance['bundle'] = 'aw_gallery';
        field_create_instance($instance);
    }
    
}

/**
* Implements hook_uninstall().
*/
function aw_gallery_uninstall() {
    // Delete variables.
    variable_del('aw_gallery_test');
    variable_del('aw_gallery_path');

    // Inform the user of the removal.
    $t = get_t();
    drupal_set_message($t('Autoweek Gallery variables removed.'));
    
    //Get all node ids with aw_gallery content type.
    $sql_query = 'SELECT nid ';
    $sql_query .= 'FROM {node} ';
    $sql_query .= 'WHERE {node}.type = :type ';
    $result = db_query($sql_query, array(':type' => 'aw_gallery'));
    
    $nids = array();
    foreach ($result as $row) {
        $nids[] = $row->nid;
    }
    
    // Delete all aw_gallery content.
    node_delete_multiple($nids);
    drupal_set_message($t('Autoweek Gallery content removed.'));
    
    //Remove all fields and field instances.
    foreach (field_info_instances('node', 'aw_gallery') as $field_name => $instance) {
        field_delete_instance($instance);
    }
    drupal_set_message($t('Autoweek Galleries fields and field instances removed.'));
    
    //Delete the content type.
    node_type_delete('aw_gallery');
    drupal_set_message($t('Autoweek Galleries content type removed.'));
        
    //Clean up deleted fields.
    field_purge_batch(1000);
}