<?php

/**
 * @file
 * Autoweek image installation
 */

/**
 * Implements hook_install().
 */
function aw_image_install() {
    // Set default variables.
    variable_set('aw_image_test', 1);
    variable_set('aw_image_path', 0.1);
    
    //Get localization function for installation as t() may be unavailable.
    $t = get_t();
    
    // Give user feedback.
    drupal_set_message($t('Autoweek image variables created.'));
    
    // Content type definition.
    $content_type = array(
        'type' => 'aw_image',
        'name' => $t('Image'),
        'description' => $t('An Autoweek image.'),
        'title_label' => $t('Image Title'),
        'base' => 'node_content',
        'custom' => TRUE,
    );
    
    // Set remaining definitions with defaults.
    $node_type = node_type_set_defaults($content_type);
    
    // Save the content type
    node_type_save($node_type);
    
    // Add a field for the body
    //node_add_body_field($node_type, $t('Description'));
    
    // Create fields.
    $fields = array();
    
    $fields['aw_image_img'] = array(
        'field_name' => 'aw_image_img',
        'type' => 'image',
    );
    $fields['aw_image_caption'] = array(
        'field_name' => 'aw_image_caption',
        'type' => 'text_long',
        'settings' => array(
            'max_length' => 0,
        ),
    );
    $fields['aw_image_taxonomy'] = array(
        'field_name' => 'aw_image_taxonomy',
        'type' => 'taxonomy_term_reference',
        'settings' => array(
            'allowed_values' => array(
              array(
                'vocabulary' => 'vehicles',
                'parent' => 0,
               ),
               array(
                'vocabulary' => 'taxonomy',
                'parent' => 0,
               ),
             ),
           ),
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    );
    $fields['aw_image_author_ref'] = array(
        'field_name' => 'aw_image_author_ref',
        'cardinality' => 1,
        'type' => 'entityreference',
        'settings' => array(
            'target_type' => 'user',
        ),
    );
    $fields['aw_image_author_override'] = array(
        'field_name' => 'aw_image_author_override',
        'type' => 'text',
    );
    $fields['aw_image_driver'] = array(
        'field_name' => 'aw_image_driver',
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
        'type' => 'entityreference',
        'settings' => array(
            'target_type' => 'node',
            'handler_settings' => array(
                'target_bundles' => array(
                    'awr_driver' => 'awr_driver',
                ),
            ),    
        ),
    );
    $fields['aw_image_legacy_url'] = array(
        'field_name' => 'aw_image_legacy_url',
        'type' => 'text',
        'field_permissions' => array(
            'type' => 2,
        ),
    );
    $fields['aw_image_source_id'] = array(
        'field_name' => 'aw_image_source_id',
        'type' => 'text',
        'field_permissions' => array(
            'type' => 2,
        ),
    );
    $fields['aw_image_legacy_order'] = array(
        'field_name' => 'aw_image_legacy_order',
        'type' => 'number_integer',
        'field_permissions' => array(
            'type' => 2,
        ),
    );
    
    foreach ($fields as $field) {
        field_create_field($field);
    }
    
    // Create field instances.
    $instances = array();
    
    $instances['aw_image_img'] = array(
        'field_name' => 'aw_image_img',
        'label' => $t('Upload image here'),
        'description' => $t('The uploaded image file.'),
        'required' => TRUE,
        'widget' => array(
            'type' => 'awlarge',
        ),
        'settings' => array(
            'title_field' => TRUE,
            'alt_field' => TRUE,
            'alt_field_default' => '[node:title]',
            'title_field_default' => '[node:title]',
        ),
        'display' => array(
            'default' => array(
                'settings' => array(
                    'image_style' => 'aw-large',
                ),
                'weight' => 0,
            ),
        ),
    );
    $instances['aw_image_caption'] = array(
        'field_name' => 'aw_image_caption',
        'label' => $t('Image Caption'),
        'description' => $t('The caption for the image.'),
        'required' => TRUE,
        'widget' => array(
            'type' => 'text_textarea',
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );
    $instances['aw_image_taxonomy'] = array(
        'field_name' => 'aw_image_taxonomy',
        'label' => $t('Taxonomy terms'),
        'description' => $t('Tags.'),
        'widget' => array(
            'type' => 'taxonomy_autocomplete',
        ),
    );
    $instances['aw_image_author_ref'] = array(  
        'field_name' => 'aw_image_author_ref',
        'label' => 'Author Reference',
        'description' => $t('The byline author reference.'),
        'widget' => array(
           'type' => 'entityreference_autocomplete',
        ),
        'settings' => array(
            'target_type' => 'user',
        ),
    );
    $instances['aw_image_author_override'] = array(
        'field_name' => 'aw_image_author_override',
        'label' => $t('Author Override Text'),
        'description' => $t('Type in the author ONLY if you\'d like to override the author reference field.'),
        'widget' => array(
            'type' => 'text_textfield',
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );
    $instances['aw_image_driver'] = array(  
        'field_name' => 'aw_image_driver',
        'label' => 'Driver Reference',
        'description' => $t(''),
        'widget' => array(
           'type' => 'entityreference_autocomplete',
        ),
        'settings' => array(
            'target_type' => 'awr_driver',
        ),
    );
    $instances['aw_image_legacy_url'] = array(
        'field_name' => 'aw_image_legacy_url',
        'label' => $t('Legacy URL'),
        'description' => $t('Legacy URL from saxotech site.  For import use ONLY.'),
        'widget' => array(
            'type' => 'text_textfield',
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );
    $instances['aw_image_source_id'] = array(
        'field_name' => 'aw_image_source_id',
        'label' => $t('Source ID'),
        'description' => $t('Source ID from saxotech site (article or gallery id).  For import use ONLY.'),
        'widget' => array(
            'type' => 'text_textfield',
        ),
        'settings' => array(
            'text_processing' => 0,
        ),
    );
    $instances['aw_image_legacy_order'] = array(
        'field_name' => 'aw_image_legacy_order',
        'label' => $t('Legacy Order'),
        'description' => $t('Legacy order from saxotech site.  For import use ONLY.'),
        'widget' => array(
            'type' => 'number',
        ),
    );
    
    foreach ($instances as $instance) {
        $instance['entity_type'] = 'node';
        $instance['bundle'] = 'aw_image';
        field_create_instance($instance);
    }
    
    //Call function to create styles.
    $style_name = array('aw-small', 'aw-medium', 'aw-large');
    _aw_image_styles_create($style_name);
}

/**
* Implements hook_uninstall().
*/
function aw_image_uninstall() {
    // Delete variables.
    variable_del('aw_image_test');
    variable_del('aw_image_path');

    // Inform the user of the removal.
    $t = get_t();
    drupal_set_message($t('Autoweek Image variables removed.'));
    
    //Get all node ids with aw_image content type.
    $sql_query = 'SELECT nid ';
    $sql_query .= 'FROM {node} ';
    $sql_query .= 'WHERE {node}.type = :type ';
    $result = db_query($sql_query, array(':type' => 'aw_image'));
    
    $nids = array();
    foreach ($result as $row) {
        $nids[] = $row->nid;
    }
    
    // Delete all aw_image content.
    node_delete_multiple($nids);
    drupal_set_message($t('Autoweek Image content removed.'));
    
    //Remove all fields and field instances.
    foreach (field_info_instances('node', 'aw_image') as $field_name => $instance) {
        field_delete_instance($instance);
    }
    drupal_set_message($t('Autoweek Images fields and field instances removed.'));
    
    //Delete the content type.
    node_type_delete('aw_image');
    drupal_set_message($t('Autoweek Images content type removed.'));
    
    //Delete image styles.
    $style_name = array('aw-small', 'aw-medium', 'aw-large');
    _aw_image_styles_delete($style_name);
    
    //Clean up deleted fields.
    field_purge_batch(1000);
}

/**
* Implements function to create new image style.
*/
function _aw_image_styles_create($style_name) {
    // Create image styles.
    foreach($style_name as $value) {
        $style = image_style_save(array('name' => $value));

        switch($value) {
            case 'aw-small':{
                $effect = array(
                    'name' => 'image_scale',
                    'data' => array(
                      'width' => 90,
                      'height' => 54,
                      'upscale' => TRUE,
                    ),
                    'isid' => $style['isid'],
                 );
                break;
            }
            case 'aw-medium':{
                $effect = array(
                    'name' => 'image_scale',
                    'data' => array(
                      'width' => 450,
                      'height' => 270,
                      'upscale' => TRUE,
                    ),
                    'isid' => $style['isid'],
                 );
                break;
            }
            case 'aw-large':{
                $effect = array(
                    'name' => 'image_scale',
                    'data' => array(
                      'width' => 900,
                      'height' => 540,
                      'upscale' => TRUE,
                    ),
                    'isid' => $style['isid'],
                 );
                break;
            }
        }
        image_effect_save($effect);
    }
    
    // Give user feedback.
    $t = get_t();
    drupal_set_message($t('Autoweek image styles created.'));
    
}

/**
* Implements function to delete image styles.
*/
function _aw_image_styles_delete($style_name) {
    // Delete image styles.
    foreach($style_name as $value) {
        image_style_delete(image_style_load($value));
    }
    
    // Give user feedback.
    $t = get_t();
    drupal_set_message($t('Autoweek image styles deleted.'));
    
}
